<?php

defined( 'ABSPATH' ) or die();

/**
 * Class UnusedCSS
 */
abstract class UnusedCSS {

	use RapidLoad_Utils;

	public $base = null;
	public $provider = null;
	public static $provider_path = null;

	public $url = null;
	public $rule = null;
	public $existing_link = null;
	public $css = [];
	public $store = null;
	public $options = [];
	public $async = true;

	public $file_system;

	public static $base_dir;


	abstract public function get_css();

    /**
     * UnusedCSS constructor.
     */
    public function __construct()
    {
        add_action('rapidload/vanish', [ $this, 'vanish' ]);
        add_action( 'admin_notices', [ $this, 'rapidload_display_global_notification' ] );

        $this->file_system = new RapidLoad_FileSystem();

	    if ( ! $this->initFileSystem() ) {
		    self::add_admin_notice( 'RapidLoad : couldn\'t access wordpress cache directory <b>(' . self::$base_dir . ')</b>. check for file permission issues in your site.' );

		    return;
	    }

        add_action( 'uucss/content_updated', [ $this, 'refresh' ], 10, 1 );

        add_action('uucss_async_queue', [$this, 'init_async_store'], 2, 3);

        add_action('uucss_async_queue_rule', [$this, 'init_async_store_rule'], 2, 4);

	    add_action( 'wp_enqueue_scripts', function () {

		    $this->url = $this->get_current_url();

            $this->url = $this->transform_url( $this->url );

		    if ( $this->enabled() ) {

                if(RapidLoad_Base::get()->rules_enabled()){

                    $this->rule = $this->get_current_rule($this->url);

                    self::log([
                        'log' => 'UnusedCSS->rules_enabled-'. json_encode($this->rule),
                        'type' => 'purging' ,
                        'url' => $this->url
                    ]);
                }

                self::log([
                    'log' => 'UnusedCSS->enabled',
                    'type' => 'purging' ,
                    'url' => $this->url
                ]);

			    $this->purge_css();
		    }else{

                self::log([
                    'log' => 'UnusedCSS->enabled:failed',
                    'type' => 'purging' ,
                    'url' => $this->url
                ]);

            }

	    }, 99);

        add_filter('uucss/rules', [$this, 'uucss_rule_types'], 90 , 1);

        add_action('uucss/clear', function (){
            $args['soft'] = true;
            $this->clear_cache(null, $args);
        });

        add_action('rapidload/job/updated', function ($job, $status){

            if($job && isset($job->id) && isset($job->rule) ){
                if($job->rule == 'is_url'){
                    new UnusedCSS_Path([
                        'url' => $job->url
                    ]);
                }else{
                    new UnusedCSS_Rule([
                        'url' => $job->url,
                        'rule' => $job->rule,
                        'regex' => $job->regex
                    ]);
                }
            }

        }, 10 , 2);

        new UnusedCSS_Queue();
    }


    function rapidload_display_global_notification() {
        ?>
        <div class="rapidload-notification notice notice-success is-dismissible">
            <div class="container">
            <div class="left-column">
                <div class="pl-6 pr-6 mt-3 inline-flex">
                    <div class="top-header">

                        <svg width="12" height="11" viewBox="0 0 12 11" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                  d="M6.09375 10.9999C9.01772 10.8361 11.2733 8.38012 11.1063 5.51477C11.0784 5.05086 10.9949 4.61424 10.8556 4.17761L10.7721 4.23219C10.9113 4.66881 10.9949 5.13273 10.9949 5.59664C10.9949 8.10723 8.90633 10.1266 6.34438 10.1266C6.26083 10.1266 6.17729 10.1266 6.09375 10.1266V10.9999Z"
                                  fill="white"/>
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                  d="M1.44336 8.73506C2.39017 10.0995 3.94962 10.9455 5.62045 11V10.0722C4.31163 9.8539 3.19774 9.28084 2.47371 8.16199L1.44336 8.73506Z"
                                  fill="white"/>
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                  d="M0.969516 3.46814C0.301182 5.0509 0.384723 6.82469 1.19229 8.32558L2.25049 7.72522C1.72139 6.60638 1.74924 5.32379 2.33403 4.23223L0.969516 3.46814Z"
                                  fill="white"/>
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                  d="M5.61865 0.0571289C3.72504 0.275441 2.0542 1.39429 1.16309 3.03163L2.55545 3.82301C3.25163 2.81332 4.36552 2.18567 5.59081 2.1038V0.0571289H5.61865Z"
                                  fill="white"/>
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                  d="M10.884 2.24019C9.74222 0.79387 7.95999 -0.0520888 6.12207 0.00248924V2.07645C7.12457 2.13103 8.04353 2.51308 8.76756 3.1953L10.884 2.24019Z"
                                  fill="white"/>
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                  d="M5.87016 4.99634C6.39926 4.99634 6.84482 5.40567 6.84482 5.95145C6.84482 6.46994 6.42711 6.90657 5.87016 6.90657C5.34106 6.90657 4.89551 6.49723 4.89551 5.95145C4.89551 5.43296 5.34106 4.99634 5.87016 4.99634Z"
                                  fill="white"/>
                            <path fill-rule="evenodd" clip-rule="evenodd"
                                  d="M11.9976 2.51294L9.10147 4.45046L6.20535 6.36069L5.95473 5.92406L5.7041 5.48744L8.85085 4.01383L11.9976 2.51294Z"
                                  fill="white"/>
                        </svg>
                        Introducing RapidLoad 2.0
                    </div>
                </div>
                <div class="content">
                    <div class="tips-slide">
                        <h2 class="mb-1 text-xsm text-tips-dark-green-font font-semibold">Introducing New Features!</h2>
                        <p class="text-xsmm text-tips-dark-green-font font-normal">We're thrilled to announce that
                            RapidLoad 2.0 is set to launched, and it's packed with exciting new features to enhance your
                            website's performance. This new version brings several optimizations, including JS
                            optimization, image optimization, font delivery, CDN, cache, and much more, all aimed at
                            improving your website's speed and providing a better user experience.
                            <br><br>
                            We're confident that the new features will take your website to the next level, giving you a
                            competitive edge in the online world. We urge you to update to RapidLoad 2.0 and experience
                            the benefits for yourself.</p>
                    </div>

                </div>
                <div class="action-footer">
                    <div class="notify-buttons">
                        <a href="https://docs.rapidload.io/features/image-delivery" target="_blank">
                            <button class="learn-more"> Learn more</button>
                        </a>
                        <button class="update-now"> Update Now</button>
                    </div>
                </div>
            </div>
                <div class="right-column">
                    <svg width="200" height="182" viewBox="0 0 200 182" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g clip-path="url(#clip0_1785_255)">
                            <path d="M168.665 153.091H127.38V164.327H168.665V153.091Z" fill="#F7F7F7"/>
                            <path opacity="0.58" d="M156.53 146.177C156.53 146.177 161.945 144.705 163.116 139.673C163.116 139.673 154.747 138.001 154.496 146.628L156.53 146.177Z" fill="#6BFC6B"/>
                            <path opacity="0.73" d="M155.869 145.583C155.869 145.583 159.644 139.648 156.321 134.038C156.321 134.038 149.944 138.076 152.781 145.608L155.869 145.583Z" fill="#6BFC6B"/>
                            <path d="M154.898 145.6C154.898 145.6 152.889 139.288 146.855 138.076C146.855 138.076 145.725 142.164 150.772 145.6H154.898Z" fill="#6BFC6B"/>
                            <path d="M158.815 145.449L157.727 152.957L150.805 152.982L149.784 145.491L158.815 145.449Z" fill="#42325B"/>
                            <path d="M184.659 0H33.9709C30.3286 0 27.376 2.94945 27.376 6.58778V112.251C27.376 115.89 30.3286 118.839 33.9709 118.839H184.659C188.302 118.839 191.254 115.89 191.254 112.251V6.58778C191.254 2.94945 188.302 0 184.659 0Z" fill="#42325B"/>
                            <path d="M93.4842 61.0541L90.0026 65.4264C86.3015 70.0674 84.5545 75.9653 85.1317 81.8708L85.8012 88.6592L95.995 79.4129L93.4842 61.0541Z" fill="#231F2D"/>
                            <path d="M117.947 61.0541L121.437 65.4264C125.154 70.0603 126.911 75.9613 126.333 81.8708L125.672 88.6592L115.479 79.4129L117.947 61.0541Z" fill="#231F2D"/>
                            <path d="M101.067 80.8173C101.067 80.8173 104.239 99.4855 99.0165 101.057C93.7941 102.629 91.3754 94.2102 84.4791 99.218C77.5828 104.226 86.4208 109.752 74.2435 108.213C62.0662 106.675 57.3209 112.678 60.2083 118.839H150.119C150.119 118.839 154.63 113.129 149.617 109.242C148.522 108.428 147.266 107.857 145.932 107.569C144.598 107.28 143.218 107.281 141.884 107.57C141.554 107.631 141.214 107.625 140.886 107.553C140.559 107.48 140.248 107.343 139.975 107.149C139.701 106.955 139.468 106.708 139.292 106.423C139.115 106.137 138.998 105.82 138.946 105.488C138.93 105.335 138.93 105.181 138.946 105.028C138.996 103.197 138.678 101.099 137.272 99.8282C135.598 98.2816 131.958 99.8951 129.28 101.5C126.23 103.372 122.643 104.175 119.086 103.783C115.964 103.406 112.776 102.378 111.905 99.8115C110.064 94.3941 111.185 80.4495 111.185 80.4495L101.067 80.8173Z" fill="#F4F4F4"/>
                            <path d="M105.729 22.33C105.729 22.33 79.9937 36.4418 96.0041 79.3962H115.463C131.481 36.4418 105.729 22.33 105.729 22.33Z" fill="#7F54B3"/>
                            <path d="M115.462 79.3962L114.592 82.6901H96.9408L95.9951 79.0116L115.462 79.3962Z" fill="#231F2D"/>
                            <path d="M105.912 54.1319C109.564 54.1319 112.524 51.1749 112.524 47.5274C112.524 43.8798 109.564 40.9229 105.912 40.9229C102.261 40.9229 99.3008 43.8798 99.3008 47.5274C99.3008 51.1749 102.261 54.1319 105.912 54.1319Z" fill="white"/>
                            <path d="M38.4151 12.6823C39.8664 12.6823 41.043 11.507 41.043 10.0572C41.043 8.60742 39.8664 7.43213 38.4151 7.43213C36.9637 7.43213 35.7871 8.60742 35.7871 10.0572C35.7871 11.507 36.9637 12.6823 38.4151 12.6823Z" fill="#E03B3B"/>
                            <path d="M45.6631 12.6823C47.1145 12.6823 48.291 11.507 48.291 10.0572C48.291 8.60742 47.1145 7.43213 45.6631 7.43213C44.2117 7.43213 43.0352 8.60742 43.0352 10.0572C43.0352 11.507 44.2117 12.6823 45.6631 12.6823Z" fill="#E8C100"/>
                            <path d="M52.9102 12.6823C54.3615 12.6823 55.5381 11.507 55.5381 10.0572C55.5381 8.60742 54.3615 7.43213 52.9102 7.43213C51.4588 7.43213 50.2822 8.60742 50.2822 10.0572C50.2822 11.507 51.4588 12.6823 52.9102 12.6823Z" fill="#11C111"/>
                            <path d="M171.394 63.537H152.086C151.009 63.537 150.136 64.4091 150.136 65.4849V65.4933C150.136 66.5691 151.009 67.4412 152.086 67.4412H171.394C172.471 67.4412 173.344 66.5691 173.344 65.4933V65.4849C173.344 64.4091 172.471 63.537 171.394 63.537Z" fill="white"/>
                            <path d="M171.394 73.8282H152.086C151.009 73.8282 150.136 74.7004 150.136 75.7762V75.7845C150.136 76.8603 151.009 77.7324 152.086 77.7324H171.394C172.471 77.7324 173.344 76.8603 173.344 75.7845V75.7762C173.344 74.7004 172.471 73.8282 171.394 73.8282Z" fill="white"/>
                            <path d="M148.094 65.4682C148.094 64.4016 147.23 63.537 146.164 63.537C145.099 63.537 144.235 64.4016 144.235 65.4682V65.51C144.235 66.5765 145.099 67.4412 146.164 67.4412C147.23 67.4412 148.094 66.5765 148.094 65.51V65.4682Z" fill="#11C111"/>
                            <path d="M148.094 75.7594C148.094 74.6929 147.23 73.8282 146.164 73.8282C145.099 73.8282 144.235 74.6929 144.235 75.7594V75.8012C144.235 76.8678 145.099 77.7324 146.164 77.7324C147.23 77.7324 148.094 76.8678 148.094 75.8012V75.7594Z" fill="#F4F4F4"/>
                            <path d="M159.794 54.8592C168.234 54.8592 175.076 48.0246 175.076 39.5936C175.076 31.1626 168.234 24.328 159.794 24.328C151.354 24.328 144.512 31.1626 144.512 39.5936C144.512 48.0246 151.354 54.8592 159.794 54.8592Z" fill="#11C111"/>
                            <path d="M159.803 24.328V39.602L174.759 36.492C174.759 36.492 172.675 24.2277 159.803 24.328Z" fill="#F4F4F4"/>
                            <path d="M159.802 39.5936L151.308 52.326C151.308 52.326 159.869 58.8302 169.787 51.1807C169.787 51.1807 176.583 46.2649 174.767 36.5254L159.802 39.5936Z" fill="#11C111"/>
                            <path d="M127.941 129.473L130.929 112.561H109.696L107.846 126.982L98.1045 127.116V129.473H127.941Z" fill="#FFD200"/>
                            <path d="M111.487 114.517L110.03 126.756H125.848L127.689 114.517H111.487Z" fill="white"/>
                            <path d="M100.004 182C155.235 182 200.008 178.796 200.008 174.844C200.008 170.891 155.235 167.687 100.004 167.687C44.7734 167.687 0 170.891 0 174.844C0 178.796 44.7734 182 100.004 182Z" fill="white"/>
                            <path d="M176.566 164.327H130.753V175.563H176.566V164.327Z" fill="white"/>
                            <path d="M139.256 128.913H91.7266V175.554H139.256V128.913Z" fill="white"/>
                            <path d="M107.369 128.913C107.369 128.913 94.5389 165.823 119.697 175.538H91.6348V128.913H107.369Z" fill="#F7F7F7"/>
                            <path d="M79.8256 36.6257H42.2309C40.3867 36.6257 38.8916 38.1192 38.8916 39.9614V63.5621C38.8916 65.4043 40.3867 66.8978 42.2309 66.8978H79.8256C81.6699 66.8978 83.1649 65.4043 83.1649 63.5621V39.9614C83.1649 38.1192 81.6699 36.6257 79.8256 36.6257Z" fill="#332947"/>
                            <path d="M51.237 42.1434H48.425C46.9643 42.1434 45.7803 43.3262 45.7803 44.7852V47.5942C45.7803 49.0533 46.9643 50.236 48.425 50.236H51.237C52.6976 50.236 53.8817 49.0533 53.8817 47.5942V44.7852C53.8817 43.3262 52.6976 42.1434 51.237 42.1434Z" fill="#7F54B3"/>
                            <path d="M62.4343 42.1434H59.6222C58.1616 42.1434 56.9775 43.3262 56.9775 44.7852V47.5942C56.9775 49.0533 58.1616 50.236 59.6222 50.236H62.4343C63.8949 50.236 65.079 49.0533 65.079 47.5942V44.7852C65.079 43.3262 63.8949 42.1434 62.4343 42.1434Z" fill="#FDC20A"/>
                            <path d="M73.6247 42.1434H70.8127C69.352 42.1434 68.168 43.3262 68.168 44.7852V47.5942C68.168 49.0533 69.352 50.236 70.8127 50.236H73.6247C75.0853 50.236 76.2694 49.0533 76.2694 47.5942V44.7852C76.2694 43.3262 75.0853 42.1434 73.6247 42.1434Z" fill="#0EBFE5"/>
                            <path d="M51.237 53.0283H48.425C46.9643 53.0283 45.7803 54.2111 45.7803 55.6701V58.4791C45.7803 59.9381 46.9643 61.1209 48.425 61.1209H51.237C52.6976 61.1209 53.8817 59.9381 53.8817 58.4791V55.6701C53.8817 54.2111 52.6976 53.0283 51.237 53.0283Z" fill="#295ECF"/>
                            <path d="M62.4343 53.0283H59.6222C58.1616 53.0283 56.9775 54.2111 56.9775 55.6701V58.4791C56.9775 59.9381 58.1616 61.1209 59.6222 61.1209H62.4343C63.8949 61.1209 65.079 59.9381 65.079 58.4791V55.6701C65.079 54.2111 63.8949 53.0283 62.4343 53.0283Z" fill="#09B42F"/>
                            <path d="M73.6247 53.0283H70.8127C69.352 53.0283 68.168 54.2111 68.168 55.6701V58.4791C68.168 59.9381 69.352 61.1209 70.8127 61.1209H73.6247C75.0853 61.1209 76.2694 59.9381 76.2694 58.4791V55.6701C76.2694 54.2111 75.0853 53.0283 73.6247 53.0283Z" fill="#FF7D00"/>
                            <path d="M78.6204 24.5286H43.4361C40.9262 24.5286 38.8916 26.561 38.8916 29.0681C38.8916 31.5752 40.9262 33.6077 43.4361 33.6077H78.6204C81.1303 33.6077 83.1649 31.5752 83.1649 29.0681C83.1649 26.561 81.1303 24.5286 78.6204 24.5286Z" fill="#7F54B3"/>
                            <path d="M42.4873 30.8907V27.2624H44.1218C44.3536 27.2624 44.5629 27.3125 44.7497 27.4127C44.9399 27.5129 45.0887 27.6511 45.1959 27.8274C45.3032 28.0002 45.3568 28.1971 45.3568 28.4183C45.3568 28.6463 45.3032 28.8519 45.1959 29.0351C45.0887 29.2148 44.9417 29.3564 44.7549 29.4601C44.5681 29.5638 44.3571 29.6156 44.1218 29.6156H43.3279V30.8907H42.4873ZM44.5006 30.8907L43.577 29.2528L44.4799 29.1232L45.5073 30.8907H44.5006ZM43.3279 28.9418H44.044C44.1339 28.9418 44.2118 28.9228 44.2775 28.8848C44.3467 28.8433 44.3986 28.7863 44.4332 28.7137C44.4712 28.6412 44.4902 28.5582 44.4902 28.4649C44.4902 28.3716 44.4695 28.2904 44.428 28.2213C44.3865 28.1487 44.3259 28.0935 44.2464 28.0554C44.1702 28.0174 44.0768 27.9984 43.9662 27.9984H43.3279V28.9418Z" fill="white"/>
                            <path d="M46.9582 30.9373C46.7264 30.9373 46.5189 30.8769 46.3355 30.7559C46.1556 30.6315 46.0121 30.4622 45.9048 30.248C45.7976 30.0303 45.744 29.7849 45.744 29.5119C45.744 29.232 45.7976 28.985 45.9048 28.7707C46.0121 28.5565 46.1591 28.3889 46.3459 28.268C46.5327 28.1436 46.7454 28.0814 46.9841 28.0814C47.1156 28.0814 47.2349 28.1004 47.3422 28.1384C47.4529 28.1764 47.5497 28.2299 47.6327 28.2991C47.7158 28.3647 47.7867 28.4425 47.8455 28.5323C47.9043 28.6187 47.9475 28.712 47.9752 28.8122L47.804 28.7915V28.1384H48.629V30.8907H47.7884V30.2272L47.9752 30.2221C47.9475 30.3188 47.9026 30.4104 47.8403 30.4968C47.778 30.5832 47.7019 30.6592 47.612 30.7248C47.522 30.7905 47.4217 30.8423 47.311 30.8803C47.2003 30.9183 47.0827 30.9373 46.9582 30.9373ZM47.1865 30.2376C47.3145 30.2376 47.4252 30.2082 47.5186 30.1495C47.612 30.0907 47.6846 30.0078 47.7365 29.9007C47.7884 29.7901 47.8144 29.6605 47.8144 29.5119C47.8144 29.3634 47.7884 29.2355 47.7365 29.1284C47.6846 29.0178 47.612 28.9331 47.5186 28.8744C47.4252 28.8122 47.3145 28.7811 47.1865 28.7811C47.062 28.7811 46.953 28.8122 46.8596 28.8744C46.7696 28.9331 46.6987 29.0178 46.6468 29.1284C46.595 29.2355 46.569 29.3634 46.569 29.5119C46.569 29.6605 46.595 29.7901 46.6468 29.9007C46.6987 30.0078 46.7696 30.0907 46.8596 30.1495C46.953 30.2082 47.062 30.2376 47.1865 30.2376Z" fill="white"/>
                            <path d="M49.3616 32.031V28.1384H50.1503L50.1814 28.7552L50.0258 28.7085C50.05 28.5945 50.1088 28.4908 50.2022 28.3975C50.2956 28.3042 50.4132 28.2299 50.555 28.1747C50.7003 28.1159 50.8525 28.0865 51.0117 28.0865C51.2469 28.0865 51.4562 28.1487 51.6395 28.2731C51.8229 28.3941 51.9664 28.5617 52.0702 28.7759C52.1775 28.9867 52.2311 29.232 52.2311 29.5119C52.2311 29.7884 52.1775 30.0337 52.0702 30.248C51.9664 30.4622 51.8211 30.6315 51.6343 30.7559C51.451 30.8769 51.24 30.9373 51.0013 30.9373C50.8456 30.9373 50.6969 30.908 50.555 30.8492C50.4132 30.7905 50.2939 30.711 50.197 30.6108C50.1001 30.5106 50.0362 30.4017 50.005 30.2843L50.197 30.2117V32.031H49.3616ZM50.7989 30.2376C50.9235 30.2376 51.0324 30.2082 51.1258 30.1495C51.2192 30.0873 51.2919 30.0026 51.3438 29.8955C51.3957 29.7884 51.4216 29.6605 51.4216 29.5119C51.4216 29.3668 51.3957 29.2407 51.3438 29.1336C51.2919 29.023 51.2192 28.9383 51.1258 28.8796C51.0359 28.8174 50.9269 28.7863 50.7989 28.7863C50.6709 28.7863 50.5602 28.8157 50.4668 28.8744C50.3734 28.9331 50.3008 29.0178 50.2489 29.1284C50.197 29.239 50.1711 29.3668 50.1711 29.5119C50.1711 29.6605 50.197 29.7884 50.2489 29.8955C50.3008 30.0026 50.3734 30.0873 50.4668 30.1495C50.5602 30.2082 50.6709 30.2376 50.7989 30.2376Z" fill="white"/>
                            <path d="M52.8287 30.8907V28.1384H53.659V30.8907H52.8287ZM53.2438 27.5941C53.0882 27.5941 52.9654 27.5578 52.8754 27.4853C52.7889 27.4093 52.7457 27.3021 52.7457 27.1639C52.7457 27.0395 52.7907 26.9376 52.8806 26.8581C52.9706 26.7786 53.0916 26.7389 53.2438 26.7389C53.3995 26.7389 53.5206 26.7769 53.6071 26.8529C53.6936 26.9255 53.7368 27.0292 53.7368 27.1639C53.7368 27.2918 53.6918 27.3954 53.6019 27.4749C53.5154 27.5544 53.3961 27.5941 53.2438 27.5941Z" fill="white"/>
                            <path d="M55.482 30.9477C55.2433 30.9477 55.0306 30.8872 54.8438 30.7663C54.6604 30.6419 54.5151 30.4726 54.4079 30.2583C54.3007 30.0406 54.2471 29.7936 54.2471 29.5171C54.2471 29.2407 54.3007 28.9953 54.4079 28.7811C54.5151 28.5634 54.6622 28.3924 54.849 28.268C55.0358 28.1436 55.2502 28.0814 55.4924 28.0814C55.6169 28.0814 55.7363 28.1004 55.8504 28.1384C55.9646 28.1764 56.0684 28.2282 56.1618 28.2939C56.2552 28.3595 56.3313 28.4356 56.3901 28.5219C56.4489 28.6049 56.4835 28.6913 56.4939 28.7811L56.2967 28.8278V27.0551H57.1321V30.8907H56.359L56.3123 30.2635L56.4783 30.2894C56.4679 30.3758 56.4333 30.4588 56.3745 30.5382C56.3192 30.6177 56.2465 30.6886 56.1566 30.7508C56.0666 30.8095 55.9629 30.8561 55.8452 30.8907C55.7311 30.9287 55.61 30.9477 55.482 30.9477ZM55.6948 30.2583C55.8228 30.2583 55.9335 30.2272 56.0269 30.165C56.1203 30.1028 56.1912 30.0165 56.2396 29.9059C56.2915 29.7953 56.3174 29.6657 56.3174 29.5171C56.3174 29.3651 56.2915 29.2338 56.2396 29.1232C56.1912 29.0126 56.1203 28.9262 56.0269 28.864C55.9335 28.8018 55.8228 28.7707 55.6948 28.7707C55.5668 28.7707 55.4561 28.8018 55.3627 28.864C55.2727 28.9262 55.2018 29.0126 55.1499 29.1232C55.098 29.2338 55.0721 29.3651 55.0721 29.5171C55.0721 29.6657 55.098 29.7953 55.1499 29.9059C55.2018 30.0165 55.2727 30.1028 55.3627 30.165C55.4561 30.2272 55.5668 30.2583 55.6948 30.2583Z" fill="white"/>
                            <path d="M57.9224 30.8907V27.2624H58.8045V30.1132H60.4234V30.8907H57.9224Z" fill="white"/>
                            <path d="M62.192 30.9425C61.9049 30.9425 61.6489 30.8803 61.4241 30.7559C61.2027 30.6315 61.0263 30.4622 60.8948 30.248C60.7668 30.0337 60.7028 29.7884 60.7028 29.5119C60.7028 29.2355 60.7668 28.9902 60.8948 28.7759C61.0263 28.5617 61.2027 28.3924 61.4241 28.268C61.6489 28.1436 61.9049 28.0814 62.192 28.0814C62.4792 28.0814 62.7334 28.1436 62.9548 28.268C63.1797 28.3924 63.3561 28.5617 63.4841 28.7759C63.6121 28.9902 63.6761 29.2355 63.6761 29.5119C63.6761 29.7884 63.6121 30.0337 63.4841 30.248C63.3561 30.4622 63.1797 30.6315 62.9548 30.7559C62.7334 30.8803 62.4792 30.9425 62.192 30.9425ZM62.192 30.2272C62.3166 30.2272 62.4273 30.1961 62.5241 30.1339C62.621 30.0717 62.6971 29.9871 62.7525 29.88C62.8078 29.7728 62.8337 29.6502 62.8303 29.5119C62.8337 29.3737 62.8078 29.2511 62.7525 29.1439C62.6971 29.0334 62.621 28.947 62.5241 28.8848C62.4273 28.8226 62.3166 28.7915 62.192 28.7915C62.0675 28.7915 61.9551 28.8226 61.8548 28.8848C61.7579 28.947 61.6818 29.0334 61.6265 29.1439C61.5711 29.2511 61.5452 29.3737 61.5486 29.5119C61.5452 29.6502 61.5711 29.7728 61.6265 29.88C61.6818 29.9871 61.7579 30.0717 61.8548 30.1339C61.9551 30.1961 62.0675 30.2272 62.192 30.2272Z" fill="white"/>
                            <path d="M65.236 30.9373C65.0042 30.9373 64.7967 30.8769 64.6133 30.7559C64.4335 30.6315 64.2899 30.4622 64.1827 30.248C64.0754 30.0303 64.0218 29.7849 64.0218 29.5119C64.0218 29.232 64.0754 28.985 64.1827 28.7707C64.2899 28.5565 64.4369 28.3889 64.6237 28.268C64.8105 28.1436 65.0233 28.0814 65.2619 28.0814C65.3934 28.0814 65.5127 28.1004 65.62 28.1384C65.7307 28.1764 65.8275 28.2299 65.9106 28.2991C65.9936 28.3647 66.0645 28.4425 66.1233 28.5323C66.1821 28.6187 66.2254 28.712 66.253 28.8122L66.0818 28.7915V28.1384H66.9068V30.8907H66.0662V30.2272L66.253 30.2221C66.2254 30.3188 66.1804 30.4104 66.1181 30.4968C66.0559 30.5832 65.9798 30.6592 65.8898 30.7248C65.7999 30.7905 65.6996 30.8423 65.5889 30.8803C65.4782 30.9183 65.3605 30.9373 65.236 30.9373ZM65.4643 30.2376C65.5923 30.2376 65.703 30.2082 65.7964 30.1495C65.8898 30.0907 65.9625 30.0078 66.0143 29.9007C66.0662 29.7901 66.0922 29.6605 66.0922 29.5119C66.0922 29.3634 66.0662 29.2355 66.0143 29.1284C65.9625 29.0178 65.8898 28.9331 65.7964 28.8744C65.703 28.8122 65.5923 28.7811 65.4643 28.7811C65.3398 28.7811 65.2308 28.8122 65.1374 28.8744C65.0475 28.9331 64.9766 29.0178 64.9247 29.1284C64.8728 29.2355 64.8468 29.3634 64.8468 29.5119C64.8468 29.6605 64.8728 29.7901 64.9247 29.9007C64.9766 30.0078 65.0475 30.0907 65.1374 30.1495C65.2308 30.2082 65.3398 30.2376 65.4643 30.2376Z" fill="white"/>
                            <path d="M68.6824 30.9477C68.4437 30.9477 68.231 30.8872 68.0442 30.7663C67.8608 30.6419 67.7155 30.4726 67.6083 30.2583C67.501 30.0406 67.4474 29.7936 67.4474 29.5171C67.4474 29.2407 67.501 28.9953 67.6083 28.7811C67.7155 28.5634 67.8625 28.3924 68.0493 28.268C68.2361 28.1436 68.4506 28.0814 68.6928 28.0814C68.8173 28.0814 68.9366 28.1004 69.0508 28.1384C69.165 28.1764 69.2687 28.2282 69.3621 28.2939C69.4555 28.3595 69.5316 28.4356 69.5905 28.5219C69.6493 28.6049 69.6839 28.6913 69.6942 28.7811L69.4971 28.8278V27.0551H70.3325V30.8907H69.5593L69.5126 30.2635L69.6787 30.2894C69.6683 30.3758 69.6337 30.4588 69.5749 30.5382C69.5195 30.6177 69.4469 30.6886 69.357 30.7508C69.267 30.8095 69.1632 30.8561 69.0456 30.8907C68.9315 30.9287 68.8104 30.9477 68.6824 30.9477ZM68.8951 30.2583C69.0231 30.2583 69.1338 30.2272 69.2272 30.165C69.3206 30.1028 69.3915 30.0165 69.44 29.9059C69.4919 29.7953 69.5178 29.6657 69.5178 29.5171C69.5178 29.3651 69.4919 29.2338 69.44 29.1232C69.3915 29.0126 69.3206 28.9262 69.2272 28.864C69.1338 28.8018 69.0231 28.7707 68.8951 28.7707C68.7671 28.7707 68.6564 28.8018 68.563 28.864C68.4731 28.9262 68.4022 29.0126 68.3503 29.1232C68.2984 29.2338 68.2725 29.3651 68.2725 29.5171C68.2725 29.6657 68.2984 29.7953 68.3503 29.9059C68.4022 30.0165 68.4731 30.1028 68.563 30.165C68.6564 30.2272 68.7671 30.2583 68.8951 30.2583Z" fill="white"/>
                            <path d="M72.6343 30.8907L72.4631 30.4657L73.5216 29.3098C73.5805 29.2441 73.6444 29.1698 73.7136 29.0869C73.7828 29.004 73.8503 28.9193 73.916 28.8329C73.9817 28.7431 74.0336 28.6567 74.0717 28.5738C74.1132 28.4908 74.1339 28.4148 74.1339 28.3457C74.1339 28.2766 74.1184 28.2161 74.0872 28.1643C74.0561 28.1125 74.0111 28.0727 73.9523 28.0451C73.8935 28.014 73.8191 27.9984 73.7292 27.9984C73.6496 27.9984 73.5735 28.0192 73.5009 28.0606C73.4282 28.0986 73.3591 28.1591 73.2933 28.242C73.2311 28.325 73.1723 28.4269 73.1169 28.5479L72.4631 28.1954C72.5357 27.995 72.6378 27.8187 72.7692 27.6667C72.9042 27.5112 73.0616 27.392 73.2414 27.3091C73.4213 27.2227 73.6133 27.1795 73.8174 27.1795C74.0319 27.1829 74.2256 27.2296 74.3986 27.3194C74.5715 27.4058 74.7082 27.5285 74.8085 27.6874C74.9123 27.8429 74.9642 28.0261 74.9642 28.2369C74.9642 28.3094 74.9555 28.3854 74.9382 28.4649C74.9209 28.5444 74.895 28.6273 74.8604 28.7137C74.8258 28.7967 74.7791 28.8865 74.7203 28.9833C74.6649 29.0766 74.5975 29.175 74.5179 29.2787C74.4384 29.3824 74.345 29.4929 74.2377 29.6104L73.4127 30.5071L73.3089 30.1132H75.125V30.8907H72.6343Z" fill="white"/>
                            <path d="M75.8351 30.9477C75.6933 30.9477 75.5826 30.908 75.503 30.8285C75.4269 30.749 75.3889 30.635 75.3889 30.4864C75.3889 30.3482 75.4304 30.2359 75.5134 30.1495C75.5964 30.0631 75.7037 30.0199 75.8351 30.0199C75.977 30.0199 76.0877 30.0614 76.1672 30.1443C76.2468 30.2238 76.2866 30.3378 76.2866 30.4864C76.2866 30.6212 76.2451 30.7317 76.162 30.8181C76.079 30.9045 75.9701 30.9477 75.8351 30.9477Z" fill="white"/>
                            <path d="M78.2523 30.9425C77.9272 30.9425 77.6487 30.8682 77.4169 30.7197C77.1886 30.5711 77.0139 30.3585 76.8928 30.0821C76.7718 29.8022 76.7112 29.467 76.7112 29.0766C76.7112 28.6861 76.7718 28.3526 76.8928 28.0762C77.0139 27.7963 77.1886 27.582 77.4169 27.4335C77.6487 27.2849 77.9272 27.2106 78.2523 27.2106C78.5775 27.2106 78.856 27.2849 79.0877 27.4335C79.3195 27.582 79.4959 27.7963 79.617 28.0762C79.7381 28.3526 79.7986 28.6861 79.7986 29.0766C79.7986 29.467 79.7381 29.8022 79.617 30.0821C79.4959 30.3585 79.3195 30.5711 79.0877 30.7197C78.856 30.8682 78.5775 30.9425 78.2523 30.9425ZM78.2523 30.1961C78.4772 30.1961 78.6501 30.0994 78.7712 29.9059C78.8958 29.7124 78.958 29.4359 78.958 29.0766C78.958 28.7068 78.8958 28.4235 78.7712 28.2265C78.6501 28.0261 78.4772 27.9259 78.2523 27.9259C78.0275 27.9259 77.8528 28.0261 77.7282 28.2265C77.6072 28.4235 77.5466 28.7068 77.5466 29.0766C77.5466 29.4359 77.6072 29.7124 77.7282 29.9059C77.8528 30.0994 78.0275 30.1961 78.2523 30.1961Z" fill="white"/>
                            <path d="M67.9838 107.419C66.6029 110.337 62.9623 112.435 60.0665 110.947C59.7569 110.797 59.4054 110.596 59.0873 110.73C58.8825 110.849 58.7213 111.031 58.627 111.248C57.2879 113.656 55.9572 116.156 55.5388 118.839H38.1475C39.4112 112.059 42.1563 105.388 47.0356 100.514C48.4584 99.0925 50.2578 97.7633 52.2162 97.7549C54.1746 97.7466 55.907 98.9671 57.7315 99.6694C59.5732 100.368 61.5659 100.573 63.5115 100.263C65.457 99.954 67.2875 99.141 68.8208 97.9054C69.1137 101.116 69.3731 104.502 67.9838 107.419Z" fill="url(#paint0_linear_1785_255)"/>
                            <path d="M52.7262 172.996C52.7011 173.277 52.7359 173.56 52.8282 173.827C52.9205 174.093 53.0683 174.337 53.2618 174.543C53.47 174.687 53.7071 174.784 53.9565 174.827C54.6142 174.961 55.2874 175.003 55.9567 174.952C57.2073 174.87 58.4497 174.691 59.6727 174.417L61.7734 174.024C62.0412 174.007 62.2911 173.883 62.468 173.682C62.5322 173.546 62.5553 173.395 62.5345 173.246C62.5137 173.098 62.4498 172.958 62.3508 172.846C61.9881 172.432 61.5193 172.126 60.995 171.96C59.7316 171.45 58.4305 171.039 57.1033 170.731C56.8825 170.697 56.673 170.611 56.4924 170.48C56.2329 170.246 56.1827 169.853 55.9986 169.56C55.8193 169.294 55.5625 169.09 55.2631 168.975C54.9637 168.86 54.6361 168.839 54.3247 168.916C53.7221 169.033 52.8434 169.443 52.6509 170.104C52.5712 171.068 52.5964 172.038 52.7262 172.996Z" fill="#F0C7D5"/>
                            <path d="M59.5304 170.99C59.3159 170.933 59.0902 170.935 58.8767 170.995C58.6632 171.056 58.4699 171.172 58.3168 171.332C57.9653 171.842 58.4173 172.653 58.0072 173.113C57.8796 173.22 57.7313 173.3 57.5715 173.348C57.4116 173.395 57.2437 173.409 57.0782 173.389H54.7599C54.1368 173.414 53.5129 173.364 52.9019 173.239C52.7648 173.18 52.6136 173.163 52.4667 173.188C52.364 173.219 52.2723 173.279 52.2026 173.361C52.1329 173.442 52.088 173.542 52.0734 173.648C52.0574 173.859 52.0889 174.07 52.1654 174.267C52.3164 174.691 52.534 175.089 52.8099 175.446C52.888 175.549 52.9845 175.637 53.0944 175.705C53.2277 175.756 53.3703 175.779 53.5129 175.772C54.8854 175.772 56.2664 175.822 57.6975 175.713C58.6516 175.646 59.6057 175.513 60.5598 175.429C61.9405 175.43 63.311 175.193 64.6105 174.727C64.779 174.671 64.9342 174.582 65.0666 174.464C65.1991 174.346 65.3059 174.202 65.3805 174.041C65.4177 173.898 65.4212 173.748 65.3907 173.603C65.3602 173.458 65.2965 173.322 65.2047 173.205C65.0225 172.96 64.7918 172.755 64.5268 172.603C63.7749 172.122 62.9495 171.766 62.083 171.55C61.2462 171.304 60.3932 171.117 59.5304 170.99Z" fill="#555056"/>
                            <path d="M27.25 170.421V170.597C27.3337 172.444 29.7608 172.494 31.1082 172.428C32.3546 172.336 33.5933 172.16 34.8158 171.901L36.9249 171.5C37.1927 171.482 37.4426 171.359 37.6195 171.157C37.6816 171.021 37.7036 170.87 37.6828 170.722C37.6621 170.574 37.5995 170.435 37.5023 170.321C37.1381 169.92 36.6682 169.631 36.1465 169.485C35.0102 169.043 33.8508 168.664 32.6733 168.348C31.6355 168.039 32.5059 166.609 32.6231 165.84C32.6651 165.687 32.6651 165.525 32.6231 165.372C32.5044 165.211 32.3322 165.099 32.1376 165.054C31.5283 164.844 30.8904 164.729 30.2462 164.711C30.1185 164.694 29.9886 164.72 29.8779 164.786C29.7759 164.862 29.6998 164.967 29.6603 165.087L27.6517 169.376C27.4558 169.697 27.3197 170.051 27.25 170.421Z" fill="#F0C7D5"/>
                            <path d="M28.129 115.972C28.129 115.972 26.6309 124.44 29.7024 130.744C31.3271 134.149 33.1434 137.459 35.1424 140.659C35.1424 140.659 28.6897 147.631 28.6897 156.426C28.6897 165.221 28.5223 165.622 28.5223 165.622L32.3973 167.579L42.0721 140.668C42.0721 140.668 42.658 136.847 42.0721 135.559C41.4863 134.272 36.5317 119.55 36.5317 119.55L28.129 115.972Z" fill="#463F46"/>
                            <path d="M63.1797 81.737C61.1795 81.737 58.9951 79.6051 57.7648 76.3112C56.3671 72.5074 56.9697 69.0129 59.1792 68.2019C61.3887 67.391 64.1171 69.6482 65.5231 73.4521C66.9375 77.2727 66.36 80.7588 64.1171 81.5781C63.8151 81.6808 63.4987 81.7345 63.1797 81.737ZM60.1166 69.8321C60.0086 69.8318 59.9012 69.8487 59.7985 69.8823C58.7608 70.2669 58.4009 72.8334 59.4554 75.7344C60.5099 78.6354 62.46 80.3074 63.4894 79.9145C64.5188 79.5215 64.8954 76.9717 63.8409 74.0624C62.8868 71.4958 61.1878 69.8321 60.1166 69.8321Z" fill="#211A30"/>
                            <path d="M71.1384 90.1054C71.0026 90.105 70.8685 90.0749 70.7456 90.0171C70.6227 89.9594 70.5139 89.8753 70.4271 89.771L63.7317 81.4109C63.658 81.3184 63.6034 81.2122 63.5711 81.0985C63.5388 80.9847 63.5294 80.8657 63.5434 80.7483C63.5574 80.631 63.5946 80.5175 63.6527 80.4146C63.7109 80.3116 63.7889 80.2212 63.8823 80.1485C64.0687 80.0038 64.3044 79.9376 64.539 79.9641C64.7736 79.9907 64.9885 80.1079 65.1377 80.2907L71.8331 88.6508C71.9811 88.8351 72.0501 89.0704 72.025 89.3054C71.9999 89.5403 71.8828 89.7558 71.6992 89.9048C71.5432 90.0381 71.3437 90.1095 71.1384 90.1054Z" fill="#211A30"/>
                            <path d="M59.3382 77.6239C59.4454 78.5057 59.4818 79.3947 59.447 80.2824C59.2765 80.9674 58.8556 81.5638 58.267 81.9544C57.6815 82.3475 57.0292 82.6308 56.342 82.7904C56.0747 82.8117 55.8267 82.9382 55.6525 83.1419C55.4784 83.3457 55.3922 83.6101 55.413 83.8772C55.418 83.9484 55.4321 84.0186 55.4549 84.0862V86.3602C55.4805 86.5985 55.4212 86.8383 55.2875 87.0374C55.1787 87.1443 55.0427 87.2195 54.8942 87.2547C54.3428 87.384 53.7635 87.3158 53.2573 87.0622C52.7511 86.8086 52.35 86.3856 52.1239 85.8669C51.8728 85.3612 51.5934 84.87 51.287 84.3956C50.9911 83.7818 50.8123 83.1184 50.7597 82.4393C50.5376 80.2594 50.9503 78.0619 51.9482 76.1107C52.5602 74.8636 53.4611 73.7803 54.5761 72.9505C55.4633 72.3152 57.2041 71.3538 58.1163 72.4573C58.5682 73.0091 58.5599 73.8116 58.9532 74.3885C59.2629 74.8065 59.7902 75.0907 59.8822 75.5923C59.9743 76.094 59.6311 76.4284 59.4721 76.8882C59.3875 77.1244 59.3422 77.373 59.3382 77.6239Z" fill="#F0C7D5"/>
                            <path d="M66.0171 82.2469V82.1131C66.0261 81.5928 66.2187 81.0924 66.5611 80.7003C66.7363 80.5098 66.972 80.3858 67.2283 80.3493C67.4846 80.3127 67.7456 80.3658 67.9672 80.4996C68.1513 80.625 68.2768 80.8173 68.4777 80.9093C68.6786 81.0012 69.1138 80.9093 69.3146 81.1601C69.5155 81.4109 69.4736 81.5948 69.5741 81.8122C69.6745 82.0295 69.959 82.2051 70.1515 82.4141C71.0973 83.434 70.0511 85.2482 69.6745 86.2765C69.1137 87.8315 68.5697 89.3864 68.0927 90.9665C67.5412 91.0462 66.9788 90.9403 66.4942 90.6655C66.3177 90.5574 66.1595 90.4219 66.0255 90.2642C65.8726 89.9904 65.7773 89.6882 65.7457 89.3762C65.714 89.0642 65.7466 88.749 65.8414 88.4501C65.9582 87.9916 65.9922 87.516 65.9418 87.0456C65.8085 86.5387 65.6407 86.0416 65.4396 85.5575C65.2974 85.1479 65.1802 84.6295 65.5066 84.3369C65.6315 84.2545 65.7516 84.1652 65.8665 84.0694C65.9456 83.9476 65.9864 83.8049 65.9837 83.6598C66.0339 83.1581 65.992 82.7234 66.0171 82.2469Z" fill="#F0C7D5"/>
                            <path d="M47.6295 119.617L57.0114 140.626L56.6181 170.496L52.3163 170.179C52.3163 170.179 44.9597 153.191 49.6967 142.699C49.6967 142.699 38.3229 132.985 34.1215 127.459C28.9577 120.653 30.121 114.918 30.121 114.918L47.6295 119.617Z" fill="#555056"/>
                            <path d="M51.9817 83.3087C53.141 83.5656 54.265 83.9614 55.3294 84.4874C58.9281 86.1595 59.0872 88.9852 60.3509 92.3961C61.1476 94.5633 62.0584 96.687 63.0793 98.7582L64.7699 88.4919L69.5822 90.4399C69.5822 90.4399 70.0593 105.597 66.5274 107.628C64.251 108.941 61.0623 107.411 58.9951 106.349C58.2502 105.973 57.0032 104.811 56.1998 104.677C54.6515 104.468 54.5259 106.291 53.1952 107.369C52.3006 107.88 51.4446 108.455 50.6342 109.091C49.8717 109.979 49.3017 111.015 48.9604 112.134C48.5733 113.509 48.4596 114.946 48.6256 116.365C48.6926 117.334 48.7595 118.446 48.0649 119.123C47.6688 119.461 47.1832 119.675 46.6672 119.742C44.9533 119.99 43.2113 119.97 41.5034 119.684C38.1186 119.419 34.7685 118.82 31.5021 117.895C30.319 117.526 29.1639 117.074 28.0456 116.54C27.8034 116.436 27.5822 116.289 27.3928 116.105C27.1827 115.87 27.0434 115.58 26.9911 115.269C26.5475 113.204 28.0372 111.29 28.7905 109.317C29.2926 107.988 29.46 106.541 29.9203 105.195C30.4141 103.691 31.3515 102.687 32.18 101.367C32.8579 100.313 33.2345 99.0759 33.9125 98.0225C35.7128 95.2438 37.7216 92.6056 39.9216 90.1305C41.2111 88.5333 42.6455 87.0584 44.2066 85.7247C45.9928 84.158 48.2745 83.27 50.651 83.2167C51.0963 83.2124 51.5412 83.2432 51.9817 83.3087Z" fill="white"/>
                            <path d="M48.1989 65.6688C46.8184 65.7471 45.4932 66.2376 44.395 67.0767C43.2967 67.9159 42.476 69.0652 42.0391 70.3756C41.6625 71.337 41.8132 72.5576 41.6625 73.5942C41.5954 74.7713 41.1154 75.8872 40.3067 76.746C39.3024 77.6573 37.7959 77.7994 36.5322 78.1338C34.4817 78.6521 32.448 79.8643 31.7031 81.8457C30.9582 83.827 31.5859 85.8335 31.2512 87.8065C30.9717 89.4501 30.0734 90.9248 28.7404 91.928C27.8198 92.6052 26.7318 93.0232 25.7777 93.6669C24.1248 94.9113 23.0341 96.7604 22.7453 98.8077C22.4566 100.855 22.9934 102.933 24.2377 104.585L24.3549 104.736C24.7077 105.091 25.035 105.471 25.3341 105.873C25.6061 106.338 25.852 106.818 26.0706 107.311C26.7201 108.441 27.6737 109.366 28.8231 109.982C29.9725 110.599 31.2717 110.881 32.5735 110.797C33.8716 110.69 35.1314 110.305 36.2668 109.667C37.4021 109.029 38.3862 108.154 39.1517 107.102C40.6163 105.162 41.4114 102.729 43.1857 101.074C44.418 100.108 45.7155 99.2281 47.069 98.4405C49.1781 96.9441 50.8185 94.5364 50.6929 91.9531C50.5758 89.8045 48.768 87.4637 50.4419 85.5576C51.0658 84.9413 51.7595 84.3998 52.5091 83.9441C53.2635 83.4797 53.8792 82.8214 54.2917 82.038C55.1286 80.2405 53.9235 77.9666 54.8776 76.1859C55.5889 74.9319 57.1707 74.4637 58.2253 73.4187C58.7807 72.7933 59.1415 72.0197 59.2634 71.1926C59.3853 70.3655 59.263 69.5208 58.9115 68.7621C58.5471 68.01 58.0191 67.3487 57.3661 66.8266C56.713 66.3044 55.9515 65.9346 55.137 65.7441C53.9297 65.4922 52.6929 65.4106 51.4629 65.5016L49.3622 65.5685C48.9717 65.5515 48.5807 65.5852 48.1989 65.6688Z" fill="#EA7140"/>
                            <path d="M34.2807 168.106C34.0656 168.049 33.8393 168.05 33.6248 168.109C33.4102 168.167 33.215 168.282 33.0588 168.44C32.7073 168.958 33.1592 169.761 32.7491 170.229C32.6201 170.334 32.4714 170.411 32.3118 170.457C32.1522 170.503 31.985 170.516 31.8201 170.497H29.4768C28.8536 170.522 28.2297 170.471 27.6188 170.346C27.4763 170.297 27.3255 170.278 27.1752 170.288C27.0729 170.32 26.9821 170.382 26.9139 170.465C26.8456 170.548 26.8027 170.649 26.7902 170.756C26.7658 170.966 26.7976 171.18 26.8823 171.374C27.0333 171.799 27.2508 172.197 27.5267 172.553C27.5949 172.662 27.69 172.751 27.8029 172.812C27.9362 172.864 28.0787 172.886 28.2214 172.879C29.6023 172.879 30.9748 172.929 32.406 172.821C33.3601 172.745 34.3142 172.612 35.2683 172.536C36.6482 172.537 38.0182 172.302 39.319 171.842C39.4881 171.783 39.6434 171.691 39.7757 171.57C39.908 171.449 40.0146 171.303 40.089 171.14C40.1248 170.997 40.1284 170.848 40.0995 170.703C40.0705 170.559 40.0098 170.422 39.9216 170.304C39.738 170.062 39.5038 169.862 39.2353 169.719C38.4853 169.232 37.6594 168.873 36.7915 168.657C35.9686 168.414 35.1296 168.23 34.2807 168.106Z" fill="#555056"/>
                        </g>
                        <defs>
                            <linearGradient id="paint0_linear_1785_255" x1="21.3253" y1="89.6707" x2="118.673" y2="146.395" gradientUnits="userSpaceOnUse">
                                <stop offset="0.01"/>
                                <stop offset="0.08" stop-opacity="0.69"/>
                                <stop offset="0.21" stop-opacity="0.32"/>
                                <stop offset="1" stop-opacity="0"/>
                            </linearGradient>
                            <clipPath id="clip0_1785_255">
                                <rect width="200" height="182" fill="white"/>
                            </clipPath>
                        </defs>
                    </svg>

                </div>
            </div>
        </div>
        <?php
    }

    function get_current_rule($url)
    {
        $rules = RapidLoad_Base::get()->get_pre_defined_rules();
        $user_defined_rules = UnusedCSS_DB::get_rule_names();

        $related_rule = false;

        foreach ($user_defined_rules as $rule_name){

            $key = array_search($rule_name, array_column($rules, 'rule'));

            if(is_numeric($key) && isset($rules[$key]) &&
                isset($rules[$key]['callback']) && is_callable($rules[$key]['callback']) && $rules[$key]['callback']() ){

                $_related_rule = UnusedCSS_DB::get_applied_rule($rules[$key]['rule'], $url);

                if($_related_rule){

                    $related_rule = $_related_rule;
                    break;
                }

            }
        }

        return $related_rule;
    }

    function uucss_rule_types($rules){

        $custom_posts = get_post_types(
            array(
                'public'   => true,
                '_builtin' => false,
            ),
            'names',
            'and'
        );

        $taxonomies = get_taxonomies([
            'public' => true
        ]);

        $rules[] = [
            'name' => 'front_page',
            'rule' => 'is_front_page',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_front_page();
            },
        ];

        $rules[] = [
            'name' => '404',
            'rule' => 'is_404',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_404();
            },
        ];

        $rules[] = [
            'name' => 'archive',
            'rule' => 'is_archive',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_archive();
            },
        ];

        foreach ($custom_posts as $key => $value){
            if($value == 'page' || $value == 'post' || $value == 'product'){
                continue;
            }
            if(( $key = array_search($value, array_column($rules, 'name')) ) === false){

                $rules[] = [
                    'name' => $value,
                    'rule' => 'is_' . $value,
                    'category' => 'Custom Post Types',
                    'priority' => 5,
                    'callback' => function() use($value){
                        return get_post_type( get_the_ID() ) == $value;
                    }
                ];
            }
        }

        foreach ($taxonomies as $key => $value){
            if(( $key = array_search($value, array_column($rules, 'name')) ) === false){

                $rules[] = [
                    'name' => $value,
                    'rule' => 'is_' . $value,
                    'category' => 'Taxonomies',
                    'priority' => 5,
                    'callback' => function() use($value){
                        return is_tax($value);
                    },
                ];
            }
        }

        $rules[] = [
            'name' => 'author',
            'rule' => 'is_author',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_author();
            },
        ];

        $rules[] = [
            'name' => 'home',
            'rule' => 'is_home',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_home();
            },
        ];

        $rules[] = [
            'name' => 'page',
            'rule' => 'is_page',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_page();
            },
        ];

        $rules[] = [
            'name' => 'post',
            'rule' => 'is_post',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_singular();
            },
        ];

        $rules[] = [
            'name' => 'search',
            'rule' => 'is_search',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_search();
            },
        ];

        $rules[] = [
            'name' => 'attachment',
            'rule' => 'is_attachment',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_attachment();
            },
        ];

        $rules[] = [
            'name' => 'single',
            'rule' => 'is_single',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_single();
            },
        ];

        $rules[] = [
            'name' => 'sticky',
            'rule' => 'is_sticky',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_sticky();
            },
        ];

        $rules[] = [
            'name' => 'paged',
            'rule' => 'is_paged',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return is_paged();
            },
        ];

        $rules[] = [
            'name' => 'path',
            'rule' => 'is_path',
            'category' => 'Standard Conditional Tags',
            'priority' => 10,
            'callback' => function(){
                return true;
            },
        ];

        return $rules;
    }

	public function frontend_scripts( $data ) {

		if ( ! isset( $this->options['uucss_load_original'] ) ) {
			return;
		}

		$data['frontend_debug'] = RapidLoad_Enqueue::$frontend_debug;
		$data['remove_cpcss_on_ui'] = apply_filters('rapidload/cpcss/remove_on_user_interaction', true);
		wp_register_script( 'rapidload', UUCSS_PLUGIN_URL . 'assets/js/rapidload.frontend.min.js', [ 'jquery' ], UUCSS_VERSION );
		wp_localize_script( 'rapidload', 'rapidload', $data );
		wp_enqueue_script( 'rapidload' );

	}

	public function initFileSystem() {

        $this->file_system = new RapidLoad_FileSystem();

        // Todo cache base setup
        /*$cache_base = apply_filters('uucss/cache-base-dir', UUCSS_CACHE_CHILD_DIR);

        $cache_base_option = RapidLoad_Base::get_option('rapidload_cache_base', null);

        if(!isset($cache_base_option)){

            $cache_base_option = $cache_base;
            RapidLoad_Base::update_option('rapidload_cache_base', $cache_base_option);
        }

        $this->base = RapidLoad_ThirdParty::plugin_exists('autoptimize') ? $cache_base_option . 'uucss' : $cache_base . 'uucss';*/

        $this->base = apply_filters('uucss/cache-base-dir', UUCSS_CACHE_CHILD_DIR)  . 'uucss';

		if ( ! $this->file_system ) {
			return false;
		}

		if ( ! $this->init_base_dir() ) {
			return false;
		}

        $this->init_log_dir();

		return true;
	}

    public function enabled() {

	    if ( $this->is_doing_api_fetch() ) {
		    return false;
	    }

	    // fix for uucss fallback css files being purged as url's
	    if ( $this->is_uucss_file() ) {
		    return false;
	    }

	    if ( ! $this->is_url_allowed($this->url) ) {
		    return false;
	    }

	    if ( is_admin() ) {
		    return false;
	    }

	    if ( wp_doing_ajax() ) {
		    return false;
	    }

	    if ( is_404() ) {
		    return false;
	    }

	    if ( is_preview() ) {
		    return false;
	    }

	    if ( $this->is_cli() ) {
		    return false;
	    }

	    if ( is_search() ) {
		    return false;
	    }

	    if ( defined( 'DOING_CRON' ) ) {
		    return false;
	    }

	    return apply_filters('uucss/enabled', true);

    }


    function enabled_frontend() {

	    if ( is_user_logged_in() ) {
		    return false;
	    }

	    if ( is_admin() ) {
		    return false;
	    }

	    return apply_filters('uucss/frontend/enabled', true);
    }

    public function init_async_store_rule($provider, $url, $args, $rule)
    {
        $this->store = new RapidLoad_Store($provider, $url, $args, $rule);
        $this->store->purge_rule();
    }

    public function init_async_store($provider, $url, $args)
    {
        $this->store = new RapidLoad_Store($provider, $url, $args);
        $this->store->purge_css();
    }

	public function purge_css() {

        global $rapidload;

        self::log([
            'log' => 'UnusedCSS->purge_css:after_transform',
            'type' => 'purging' ,
            'url' => $this->url
        ]);

        $data = null;
        $link = null;

        $this->existing_link = RapidLoad_Settings::link_exists( $this->url );

        if (    !$this->existing_link &&
            (!isset( $this->options['uucss_disable_add_to_queue'] ) ||
                isset( $this->options['uucss_disable_add_to_queue'] ) &&
                $this->options['uucss_disable_add_to_queue'] != "1") || $this->rule)
        {

            self::log([
                'log' => 'UnusedCSS->purge_css:url_not_exist',
                'type' => 'purging' ,
                'url' => $this->url
            ]);

            $this->cache( $this->url , []);
        }

		// disabled exceptions only for frontend
		if ( $this->is_url_allowed( $this->url) ) {

			$this->get_css();

            self::log([
                'log' => 'UnusedCSS->purge_css:is_url_allowed',
                'type' => 'purging' ,
                'url' => $this->url
            ]);

            if( !$rapidload->rules_enabled() &&
                $this->existing_link
            ){

                if(gettype($this->existing_link) == "boolean"){
                    $data = new UnusedCSS_Path([
                        'url' => $this->url
                    ]);
                }else{
                    $data = $this->existing_link;
                }

                self::log([
                    'log' => 'UnusedCSS->purge_css:url_exist',
                    'type' => 'purging' ,
                    'url' => $this->url
                ]);

            }
            else if($rapidload->rules_enabled() &&
                $this->existing_link){

                $data = new UnusedCSS_Path([
                    'url' => $this->url,
                    'rule' => $this->rule ? $this->rule->rule : null,
                    'status' => $this->rule ? 'rule-based' : 'queued'
                ]);

                if(isset($data->rule_id)) {

                    $link = $data;
                    if(gettype($this->existing_link) == "boolean"){
                        $data = UnusedCSS_Rule::get_rule_from_id($data->rule_id);
                    }else{
                        $data = $this->existing_link;
                    }


                }elseif ($this->rule && $data->is_type('Path') && $data->rule_note != 'detached'){

                    $data->attach_rule($this->rule->id, $this->rule->rule);
                    $data->save();

                    $link = $data;

                    if(gettype($this->existing_link) == "boolean"){
                        $data = new UnusedCSS_Rule([
                            'rule' => $this->rule->rule,
                            'regex' => $this->rule->regex,
                        ]);
                    }else{
                        $data = $this->existing_link;
                    }

                }

                self::log([
                    'log' => 'UnusedCSS->purge_css:url_exist',
                    'type' => 'purging' ,
                    'url' => $this->url
                ]);

            }

			if(isset($data) && $data->status === 'success'){

                $files = $data->get_files();

                if (is_array($files) && count($files) > 0 ) {

                    $this->frontend_scripts([
                        'files' => $files
                    ]);

                }

            }

		}

        if($this->existing_link){
            new UnusedCSS_Enqueue($data, $this->url, $link);

        }

	}

    public function cache($url = null, $args = []) {

	    if ( ! $this->is_url_allowed( $url, $args) ) {
		    return false;
	    }

	    if ( ! isset( $args['post_id'] )) {
		    $args['post_id'] = url_to_postid($url);
	    }

	    if ( ! isset( $args['options'] ) ) {

	        $post_id = $args['post_id'] ? $args['post_id'] : false;

		    $args['options'] = $this->api_options($post_id);
	    }

	    if(RapidLoad_Base::get()->rules_enabled() && !$this->rule && isset($args['rule_id'])){

            $this->rule = UnusedCSS_Rule::get_rule_from_id($args['rule_id']);

        }

	    if($this->rule){

            $this->existing_link = new UnusedCSS_Rule([
                'rule' => $this->rule->rule,
                'regex' => $this->rule->regex
            ]);

            new UnusedCSS_Path([
                'url' => $url,
                'rule' => $this->existing_link->rule,
                'status' => 'rule-based',
                'rule_id' => $this->existing_link->id
            ]);

            self::log([
                'log' => 'UnusedCSS->cache:get_url_for_rule',
                'type' => 'purging' ,
                'url' => $url
            ]);

        }else{

            $this->existing_link = new UnusedCSS_Path([
                'url' => $url,
                'status' => 'queued'
            ]);

            self::log([
                'log' => 'UnusedCSS->cache:get_url',
                'type' => 'purging' ,
                'url' => $url
            ]);
        }

        if($this->existing_link->status == 'failed' && $this->existing_link->attempts > 2 && !isset($args['immediate'])){

            self::log([
                'log' => 'UnusedCSS->cache:url_failed_attempts',
                'type' => 'purging' ,
                'url' => $url
            ]);
            return false;
        }

        if($this->existing_link->is_type('Path')){

            $this->existing_link->rule_id = NULL;
            $this->existing_link->requeue(isset($args['immediate']) ? 0 : -1);
            $this->existing_link->save();

            self::log([
                'log' => 'UnusedCSS->cache:url_status_updated-queued',
                'type' => 'purging' ,
                'url' => $url
            ]);

        }else{

            if($this->existing_link->status == 'failed'){

                $this->existing_link->requeue(isset($args['immediate']) ? 0 : -1);
                $this->existing_link->save();

                self::log([
                    'log' => 'UnusedCSS->cache:rule_status_updated-queued',
                    'type' => 'purging' ,
                    'url' => $url
                ]);

            }

        }

        $this->async = apply_filters('uucss/purge/async',true);

	    if (! $this->async || isset($args['first_job'])) {

            if($this->existing_link->is_type('Path')){
                $this->init_async_store($this->provider, $url, $args);
                self::log([
                    'log' => 'UnusedCSS->cache:init_async_store',
                    'type' => 'purging' ,
                    'url' => $url
                ]);
            }else{
                $this->init_async_store_rule($this->provider, $url, $args, $this->existing_link);
                self::log([
                    'log' => 'UnusedCSS->cache:init_async_store_rule',
                    'type' => 'purging' ,
                    'url' => $url
                ]);
            }

        }else if ( isset( $args['immediate'] ) ) {

            $spawned = false;

            if($this->existing_link->is_type('Path')){
                $spawned = $this->schedule_cron('uucss_async_queue', [
                    'provider' => $this->provider,
                    'url'      => $url,
                    'args'     => $args
                ]);
                self::log([
                    'log' => 'UnusedCSS->cache:schedule_cron-uucss_async_queue-' . $spawned,
                    'type' => 'purging' ,
                    'url' => $url
                ]);
            }else{

                $spawned = $this->schedule_cron('uucss_async_queue_rule', [
                    'provider' => $this->provider,
                    'url'      => $url,
                    'args'     => $args,
                    'rule'     => $this->existing_link
                ]);
                self::log([
                    'log' => 'UnusedCSS->cache:schedule_cron-uucss_async_queue_rule-' . $spawned,
                    'type' => 'purging' ,
                    'url' => $url
                ]);
            }

            $this->existing_link->status = 'processing';
            $this->existing_link->save();

            self::log([
                'log' => 'UnusedCSS->cache:url_status_updated-processing',
                'type' => 'purging' ,
                'url' => $url
            ]);

	    	if(!$spawned){

                if($this->existing_link->is_type('Path')){
                    $this->init_async_store($this->provider, $url, $args);
                    self::log([
                        'log' => 'UnusedCSS->cache:init_async_store',
                        'type' => 'purging' ,
                        'url' => $url
                    ]);
                }else{
                    $this->init_async_store_rule($this->provider, $url, $args, $this->existing_link);
                    self::log([
                        'log' => 'UnusedCSS->cache:init_async_store_rule',
                        'type' => 'purging' ,
                        'url' => $url
                    ]);
                }

            }
	    }

	    return true;
    }


	public function refresh( $url, $args = [] ) {
		$this->clear_cache( $url );
		$this->cache( $url, $args );
	}


	public function api_options( $post_id = false ) {

	    $whitelist_packs = [ 'wp' ];
	    if ( isset( $this->options['whitelist_packs'] ) ) {

		    foreach ( $this->options['whitelist_packs'] as $whitelist_pack ) {

			    // 9:wordpress
			    $pack              = $name = explode( ':', $whitelist_pack );
			    $whitelist_packs[] = $pack[0];

		    }

	    }

		$post_options = $post_id ? RapidLoad_Base::get_page_options( $post_id ) : [];

		$safelist = isset( $this->options['uucss_safelist'] ) ? json_decode( $this->options['uucss_safelist'] ) : [];

		$blocklist = isset( $this->options['uucss_blocklist'] ) ? json_decode( $this->options['uucss_blocklist'] ) : [];

		// merge post and global safelists
		if ( ! empty( $post_options['safelist'] ) ) {
			$safelist = array_merge( $safelist, json_decode( $post_options['safelist'] ) );
		}

        if ( ! empty( $post_options['blocklist'] ) ) {
            $blocklist = array_merge( $blocklist, json_decode( $post_options['blocklist'] ) );
        }

        $cacheBusting = false;

        if(isset($this->options['uucss_cache_busting_v2'])){

            $cacheBusting = apply_filters('uucss/cache/bust',[]);

        }

		return apply_filters('uucss/api/options', [
			"keyframes"         => isset( $this->options['uucss_keyframes'] ),
			"fontFace"          => isset( $this->options['uucss_fontface'] ),
			"variables"         => isset( $this->options['uucss_variables'] ),
			"minify"            => isset( $this->options['uucss_minify'] ),
			"analyzeJavascript" => isset( $this->options['uucss_analyze_javascript'] ),
            "inlineCss"          => isset( $this->options['uucss_include_inline_css'] ),
			"whitelistPacks"    => $whitelist_packs,
			"safelist"          => $safelist,
			"blocklist"          => $blocklist,
            "cacheBusting"          => $cacheBusting,
		]);
    }

	public function init_base_dir() {

		self::$base_dir = WP_CONTENT_DIR . $this->base;

		if ( $this->file_system->exists( self::$base_dir ) ) {
			return true;
		}

		// make dir if not exists
		$created = $this->file_system->mkdir( self::$base_dir );

		if (!$created || ! $this->file_system->is_writable( self::$base_dir ) || ! $this->file_system->is_readable( self::$base_dir ) ) {
			return false;
		}

		return true;
	}

	public function init_log_dir(){

        if(!self::get_log_option()){
            return false;
        }

        if ( $this->file_system->exists( UUCSS_LOG_DIR ) ) {
            return true;
        }

        if( $this->file_system->is_writable( UUCSS_LOG_DIR ) ){
            return false;
        }

        $created = $this->file_system->mkdir( UUCSS_LOG_DIR , 0755, !$this->file_system->exists( wp_get_upload_dir()['basedir'] . '/rapidload/' ));

        if (!$created || ! $this->file_system->is_writable( UUCSS_LOG_DIR ) || ! $this->file_system->is_readable( UUCSS_LOG_DIR ) ) {
            return false;
        }

        return true;
    }


    protected function cache_file_exists($file){
        return $this->file_system->exists( self::$base_dir . '/' . $file );
    }


    public function clear_cache($url = null, $args = []) {

	    $args['url'] = $url;
	    $rule = isset($args['rule']) ? $args['rule'] : false;
	    $regex = isset($args['regex']) ? $args['regex'] : false;

	    if ( $url && RapidLoad_Settings::link_exists_with_error( $url ) || $rule && $regex && UnusedCSS_DB::rule_exists_with_error($rule, $regex)) {

		    $this->clear_files($url, $args, $rule, $regex);
	    }

	    if ( $url || $rule && $regex) {
		    return false;
	    }

        $results = false;

	    if(isset($args['type']) && $args['type'] == 'rule'){

            $rules = UnusedCSS_DB::get_rules_where(' WHERE id > 0');

            foreach ($rules as $rule){

                $this->clear_files($rule['url'], [ 'url' => $rule['url'] , 'soft' => isset( $args['soft']) ] , $rule['rule'], $rule['regex']);

            }

        }else{

            $this->file_system->delete( self::$base_dir, true );

            RapidLoad_Settings::clear_links( isset( $args['soft'] ) );
            UnusedCSS_DB::update_rule_status();

            do_action( 'uucss/cache_cleared', $args );
        }

	    return true;
    }

    public function remove_unused_files($url, $rule = false, $regex = false){

        // get unused files
        $unused_files = RapidLoad_DB::migrated() ? UnusedCSS_DB::link_files_used_elsewhere($url, $rule, $regex) : RapidLoad_Settings::link_files_used_elsewhere( $url );

        // remove unused files from filesystem
        foreach ( $unused_files as $unused_file ) {
            $this->file_system->delete( self::$base_dir . '/' . $unused_file );
        }

    }

    public function clear_files($url, $args, $rule = false, $regex = false ){

        if ( RapidLoad_Settings::link_exists( $url ) || UnusedCSS_DB::rule_exists($rule, $regex)) {

            $this->remove_unused_files($url, $rule, $regex);

        }

        if($url && !$rule && !$regex){

            RapidLoad_Settings::delete_link($url);

        }else{

            UnusedCSS_DB::requeue_urls([
                $url
            ]);

        }

        if($rule && $regex){
            UnusedCSS_DB::delete_rule([
                'rule' => $rule,
                'regex' => $regex
            ]);
        }

        do_action( 'uucss/cache_cleared', $args );

    }


	public function get_cached_file( $file_url, $cdn = null ) {

		if ( ! $cdn || empty( $cdn ) ) {
			$cdn = content_url();
		} else {

            $url_parts = parse_url( content_url() );

			$cdn = rtrim( $cdn, '/' ) . (isset($url_parts['path']) ? rtrim( $url_parts['path'], '/' ) : '/wp-content');

		}

		return implode( '/', [
			$cdn,
            trim($this->base, "/"),
			$file_url
		] );
	}

    public function vanish() {

	    if ( ! $this->initFileSystem() ) {
		    return;
	    }

	    $delete = self::$base_dir;

	    if ( ! $this->file_system->exists( $delete ) ) {
		    return;
	    }

	    RapidLoad_Settings::clear_links();

	    $this->file_system->delete( $delete, true );
    }

    public function cache_file_count(){
        $files = scandir(UnusedCSS::$base_dir);
        $files = array_filter($files, function ($file){
           return false !== strpos($file, '.css');
        });
        return count($files);
    }

    public function is_provider_installed() {
        $file = ABSPATH . PLUGINDIR . '/' . self::$provider_path;

        return file_exists( $file );
    }

    public function cleanCacheFiles(){

        $links = UnusedCSS_DB::get_links_where(" WHERE status = 'success' ");
        $rules = UnusedCSS_DB::get_rules_where(" WHERE status = 'success' ");

        $used_files = [];

        foreach ($links as $link){

            if(isset($link['files']) && !empty($link['files'])){
                $uucss_files = array_column($link['files'],'uucss');
                if(isset($uucss_files) && !empty($uucss_files)){
                    $used_files = array_merge($used_files, $uucss_files);
                }
            }

        }

        foreach ($rules as $rule){

            if(isset($rule['files']) && !empty($rule['files'])){
                $uucss_files = array_column($rule['files'],'uucss');
                if(isset($uucss_files) && !empty($uucss_files)){
                    $used_files = array_merge($used_files, $uucss_files);
                }
            }

        }

        if ($handle = opendir(UnusedCSS::$base_dir)) {
            while (false !== ($file = readdir($handle))) {
                if ('.' === $file) continue;
                if ('..' === $file) continue;

                if(!in_array($file, $used_files) && $this->file_system->exists(UnusedCSS::$base_dir . '/' . $file)){
                    $this->file_system->delete(UnusedCSS::$base_dir . '/' . $file);
                }
            }
            closedir($handle);
        }
    }
}
